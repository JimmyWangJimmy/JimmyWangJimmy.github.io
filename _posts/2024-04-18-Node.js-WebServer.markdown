
###### nodemon 自动检测文件变更及启动
根目录下运行该命令，安装nodemon
```bash
npm install --save-dev nodemon
```
安装后后端会自动检测文件变更并重启服务，但是在浏览器中刷新页面时，前端页面不会自动刷新，需要手动刷新。

###### 更改ResponseMessage
override the default Reason-Phrase (the text appearing immediately after the status code) sent by Express.
```javascript
response.statusMessage = 'Response You Like'
```

###### VS Code插件安装失败
解决方法：1.打开设置 2.搜索找到并打开setting.json文件找到下面的一行
http.proxyAuthorization": XXX
3.修改其值为null

###### npm init
test: 
```bash
"echo \"Error: no test specified\" && exit 1"
```

###### 下载express
```bash
npm install express 
```

###### 引入日志记录中间件Morgan
```bash
$ npm install morgan
```

在`index.js`中引入
```javascript
const express = require('express')
const morgan = require('morgan') //引入日志记录中间件

const app = express()

app.use(express.json())
app.use(morgan('tiny'))//使用tiny格式记录
```

tiny格式：
```
method :url :status :res[content-length] - :response-time ms
```
日志输出示例:
```
GET /api/persons 200 223 - 5.611 ms
```

自定义格式：

###### 解决跨域问题
前置知识：
same-origin policy:
- 一个源是指一个协议、主机和端口的组合
- 一个源的脚本只能访问同源的资源
> This means that a web application using those APIs can only request resources from the same origin the application was loaded from unless the response from other origins includes the right CORS headers.


eg: http://localhost:3001/index.html 与 http://localhost:3001/api/persons 是同源的
因为有1.同样的protocol(http) 2.同样的host(localhost) 3.同样的port(3001)


CORS: Cross-Origin Resource Sharing
[MDN-CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
<img src="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS/cors_principle.png">

在后端服务中引入cors
```bash
npm install cors
```

###### 环境变量
[维基百科-环境变量](https://zh.wikipedia.org/wiki/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F)


###### 使用Fly.io 部署
1. 安装flyctl
如果遇到无法识别pwsh,则需要安装最新powershell

2. 登录fly
```bash
fly auth login
```

3. 创建应用
```bash
fly init
```

注意在部署前进行以下修改：
1.在`fly.toml`中添加环境变量（与后端的端口一致）
```toml
[env]
PORT = "3000"
```
2.修改`index.js`文件中的端口号
```javascript
const PORT = process.env.PORT || 3000
```

4. 部署
```bash
fly deploy
```

5. 查看部署情况
```bash
flyctl ping -o personal
``` 


###### FullStack部署
解决CORS(Cross-Origin Resource Sharing)

1.backend 下载 cors
```bash
npm install cors
```
2.在`index.js`中引入cors
```javascript
const cors = require('cors')
app.use(cors())
``` 

注意涉及到文件夹的部分最好在gitbash中操作。

可以使用script命令来简化操作
一个例子：package.json`中的scripts部分
```json
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "dev": "nodemon index.js",
    "start": "node index.js",
    "build:ui": "rm -rf dist && cd E:/FullStackCamp/FullStackOpenCourse/part2/phonebook/part2phonebook/ && npm run build && cp -r dist E:/FullStackCampCP/FullStackOpenCourse/part3phonebookbackend",
    "deploy": "fly deploy",
    "deploy:full": "npm run build:ui && npm run deploy",
    "logs:prod": "fly logs --app phonebook-backend"
  },
```

注意利用express的中间件static来提供静态文件
```javascript
app.use(express.static('dist'))
```